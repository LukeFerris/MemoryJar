AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  Cdn:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /index.html
        DefaultCacheBehavior:
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          Compress: true
          TargetOriginId: StackeryCDN
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        DefaultRootObject: index.html
        PriceClass: PriceClass_100
        Origins:
          - DomainName: !GetAtt memoryjarbucket.RegionalDomainName
            Id: StackeryCDN
            S3OriginConfig:
              OriginAccessIdentity: !Sub
                - origin-access-identity/cloudfront/${OriginAccessIdentity}
                - OriginAccessIdentity: !Ref CdnOriginAccessIdentity
  Website:
    Type: AWS::CodeBuild::Project
    Metadata:
      StackeryType: website
    DependsOn: WebsiteRole
    Properties:
      Name: !Sub ${AWS::StackName}-Website
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: REACT_APP_REGISTER_AUDIO_API
            Value: !Sub https://${UserDataAPI}.execute-api.${AWS::Region}.amazonaws.com
          - Name: REACT_APP_URL_API
            Value: !Sub https://${UploadAPI}.execute-api.${AWS::Region}.amazonaws.com
          - Name: BUCKET_NAME
            Value: !Ref AudioLibrary
          - Name: BUCKET_ARN
            Value: !GetAtt AudioLibrary.Arn
          - Name: REACT_APP_AUDIO_LIBRARY_URL
            Value: !GetAtt AudioLibrary.RegionalDomainName
          - Name: REACT_APP_USER_POOL_CLIENT_ID
            Value: !Ref website
          - Name: REACT_APP_USER_POOL_ID
            Value: !Ref UserPool
          - Name: USER_POOL_ARN
            Value: !GetAtt UserPool.Arn
          - Name: REACT_APP_THEME_API_URL
            Value: !Sub https://${ThemeAPI}.execute-api.${AWS::Region}.amazonaws.com
          - Name: REACT_APP_DOWNLOAD_API
            Value: !Sub https://${DownloadAPI}.execute-api.${AWS::Region}.amazonaws.com
          - Name: SENTRY_ENVIRONMENT
            Value: !Ref EnvConfigsentryEnvironmentAsString
          - Name: REACT_APP_MIXPANEL_TOKEN
            Value: !Ref EnvConfigmixPanelKeyAsString
          - Name: REACT_APP_HOTJAR_ID
            Value: !Ref EnvConfighotjarIDAsString
          - Name: REACT_APP_HOTJAR_SV
            Value: !Ref EnvConfighotjarSVAsString
      ServiceRole: !GetAtt WebsiteRole.Arn
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub
          - |-
            version: 0.2
            phases:
              install:
                runtime-versions:
                  nodejs: latest
                  python: latest
                  ruby: latest
                commands:
                  - |
                    _SOURCE_LOCATION="${SourceLocation}"
                    if [ s3 != "${!_SOURCE_LOCATION%%:*}" ]; then
                      git clone "${SourceLocation}" repo
                      cd repo
                      git checkout "${SourceVersion}"
                    else
                      aws s3 cp "${SourceLocation}" repo.tgz
                      tar --strip-components 1 -xvvzf repo.tgz
                    fi
                  - cd ${SourceDirectory}
              pre_build:
                commands:
                  - |
                    if [ ! -f yarn.lock -a -f package.json ]; then
                      npm install --production
                    elif [ -f yarn.lock -a -f package.json ]; then
                      yarn install --production
                    elif [ -f requirements.txt ]; then
                      pip install -r requirements.txt
                    elif [ -f Gemfile ]; then
                      bundle install
                    fi
              build:
                commands:
                  - ${BuildCommand}
              post_build:
                commands:
                  - if [ $CODEBUILD_BUILD_SUCCEEDING == 0 ]; then exit 1; fi
                  - |
                    _SOURCE_LOCATION=${SourceLocation}
                    if [ s3 != "${!_SOURCE_LOCATION%%:*}" ]; then
                      cd "${!CODEBUILD_SRC_DIR}/repo"
                    else
                      cd "${!CODEBUILD_SRC_DIR}"
                    fi
                  - aws s3 sync '${PublishDirectory}' 's3://${DestinationBucketName}' --acl public-read --cache-control 'max-age=0, must-revalidate, public' --no-progress --delete
          - PublishDirectory: site/build
            BuildCommand: npm run build
            SourceDirectory: site
            DestinationBucketName: !Ref memoryjarbucket
      Tags:
        - Key: Stackery Project Type
          Value: Website Builder
  WebsiteEvents:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codebuild
        detail-type:
          - CodeBuild Build State Change
        detail:
          build-status:
            - SUCCEEDED
            - FAILED
            - FAULT
            - STOPPPED
            - TIMED_OUT
          project-name:
            - !Ref Website
      Targets:
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
          Id: StackeryAgentCommander
  WebsiteEventsPermission:
    Type: AWS::Lambda::Permission
    DependsOn: WebsiteEvents
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WebsiteEvents.Arn
  WebsiteRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-Website
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: Logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-Website:log-stream:*
        - PolicyName: DownloadSourceFromStackeryAssetsBucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: arn:aws:s3:::stackery-assetsbucket-*/*
        - PolicyName: UploadToDestinationObjectStore
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !Sub ${memoryjarbucket.Arn}/*
                  - !Sub ${memoryjarbucket.Arn}
  WebsiteBuildTrigger:
    Type: Custom::StackeryWebsiteBuildTrigger
    DependsOn: WebsiteEvents
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Type: website
      ProjectName: !Ref Website
      SourceVersion: !Ref SourceVersion
  CdnOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Stackery
  registerAudioRecording:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-registerAudioRecording
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: registerAudioRecording
      CodeUri: api/responsibleFor/audio/registerAudioRecording
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref memoryjarDatabaseRootUserSecret
        - Statement:
            - Effect: Allow
              Action:
                - rds-data:BatchExecuteStatement
                - rds-data:BeginTransaction
                - rds-data:CommitTransaction
                - rds-data:ExecuteStatement
                - rds-data:RollbackTransaction
              Resource:
                - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${memoryjarDatabase}
      Environment:
        Variables:
          DB_ID: !Ref memoryjarDatabase
          DB_ADDRESS: !GetAtt memoryjarDatabase.Endpoint.Address
          DB_PORT: !GetAtt memoryjarDatabase.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${memoryjarDatabase}
          DB_ROOT_USER_SECRET_ARN: !Ref memoryjarDatabaseRootUserSecret
          SENTRY_ENVIRONMENT: !Ref EnvConfigsentryEnvironmentAsString
          SENTRY_LAMBDA_DSN: !Ref EnvConfigsentryLambdaDSNAsString
      Events:
        UserDataAPIPUT:
          Type: HttpApi
          Properties:
            Path: /
            Method: PUT
            ApiId: !Ref UserDataAPI
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 29000
  memoryjarDatabase:
    Type: AWS::RDS::DBCluster
    Properties:
      BackupRetentionPeriod: 1
      DBSubnetGroupName: !Ref memoryjarDatabaseSubnetGroup
      Engine: aurora-postgresql
      EngineMode: serverless
      MasterUsername: !Sub '{{resolve:secretsmanager:${memoryjarDatabaseRootUserSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${memoryjarDatabaseRootUserSecret}:SecretString:password}}'
      EnableHttpEndpoint: true
      ScalingConfiguration:
        AutoPause: false
        MinCapacity: 2
        MaxCapacity: 384
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref memoryjarDatabaseSecurityGroup
  memoryjarDatabaseRootUserSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref memoryjarDatabaseRootUserSecret
      TargetId: !Ref memoryjarDatabase
      TargetType: AWS::RDS::DBCluster
  memoryjarDatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
        - ResourceName: memoryjarDatabase
      SubnetIds: !Ref DefaultVPCSubnets
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
            - ResourceName: memoryjarDatabase
  memoryjarDatabaseRootUserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub
        - Root user login info for Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName}
        - ResourceName: memoryjarDatabase
      GenerateSecretString:
        SecretStringTemplate: '{"username": "root"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
      Name: !Sub /${EnvironmentTagName}/${StackTagName}/memoryjarDatabase/RootUser
  memoryjarDatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database Security Group
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 5432
        IpProtocol: tcp
        ToPort: 5432
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Security Group
            - ResourceName: memoryjarDatabase
      VpcId: !Ref DefaultVPCId
  memoryjarbucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-memoryjar-${AWS::AccountId}
      WebsiteConfiguration:
        IndexDocument: index.html
  requestUploadUrl:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-requestUploadUrl
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: requestUploadUrl
      CodeUri: api/responsibleFor/audio/requestUploadUrl
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - S3CrudPolicy:
            BucketName: !Ref AudioLibrary
      Events:
        UploadAPIGET:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId: !Ref UploadAPI
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 29000
      Environment:
        Variables:
          BUCKET_NAME: !Ref AudioLibrary
          BUCKET_ARN: !GetAtt AudioLibrary.Arn
          SENTRY_ENVIRONMENT: !Ref EnvConfigsentryEnvironmentAsString
          SENTRY_LAMBDA_DSN: !Ref EnvConfigsentryLambdaDSNAsString
  AudioLibrary:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-audiolibr-${AWS::AccountId}
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - PUT
            AllowedOrigins:
              - '*'
            Id: myCORSRuleId1
            MaxAge: 3600
  AudioLibraryBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AudioLibrary
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt AudioLibrary.Arn
              - !Sub ${AudioLibrary.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
        - email
        - preferred_username
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AutoVerifiedAttributes:
        - email
  website:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
  getMemories:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getMemories
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: getMemories
      CodeUri: api/responsibleFor/audio/getMemories
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref memoryjarDatabaseRootUserSecret
        - Statement:
            - Effect: Allow
              Action:
                - rds-data:BatchExecuteStatement
                - rds-data:BeginTransaction
                - rds-data:CommitTransaction
                - rds-data:ExecuteStatement
                - rds-data:RollbackTransaction
              Resource:
                - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${memoryjarDatabase}
      Events:
        UserDataAPIGET:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId: !Ref UserDataAPI
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 29000
      Environment:
        Variables:
          DB_ID: !Ref memoryjarDatabase
          DB_ADDRESS: !GetAtt memoryjarDatabase.Endpoint.Address
          DB_PORT: !GetAtt memoryjarDatabase.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${memoryjarDatabase}
          DB_ROOT_USER_SECRET_ARN: !Ref memoryjarDatabaseRootUserSecret
          SENTRY_LAMBDA_DSN: !Ref EnvConfigsentryLambdaDSNAsString
          SENTRY_ENVIRONMENT: !Ref EnvConfigsentryEnvironmentAsString
  UserDataAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefinitionBody:
        openapi: '3.0'
        info:
          title: !Sub ${AWS::StackName}-HttpApi
          version: '1.0'
        paths:
          /:
            put:
              responses: {}
            get:
              responses: {}
            post:
              responses: {}
          /{mediaItemId}:
            delete:
              responses: {}
      FailOnWarnings: true
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowHeaders:
          - '*'
        AllowMethods:
          - '*'
      Auth:
        Authorizers:
          CognitoAuth:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
              audience:
                - !Ref website
        DefaultAuthorizer: CognitoAuth
  UploadAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefinitionBody:
        openapi: '3.0'
        info:
          title: !Sub ${AWS::StackName}-HttpApi2
          version: '1.0'
        paths:
          /:
            get:
              responses: {}
      FailOnWarnings: true
      CorsConfiguration:
        AllowOrigins:
          - '*'
  ThemeAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefinitionBody:
        openapi: '3.0'
        info:
          title: !Sub ${AWS::StackName}-HttpApi
          version: '1.0'
        paths:
          /:
            get:
              responses: {}
      FailOnWarnings: true
      Auth:
        Authorizers:
          CognitoAuth:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
              audience:
                - !Ref website
        DefaultAuthorizer: CognitoAuth
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowHeaders:
          - '*'
        AllowMethods:
          - '*'
  getThemes:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getThemes
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: getThemes
      CodeUri: api/responsibleFor/audio/getThemes
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref memoryjarDatabaseRootUserSecret
        - Statement:
            - Effect: Allow
              Action:
                - rds-data:BatchExecuteStatement
                - rds-data:BeginTransaction
                - rds-data:CommitTransaction
                - rds-data:ExecuteStatement
                - rds-data:RollbackTransaction
              Resource:
                - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${memoryjarDatabase}
      Events:
        ThemeAPIGET:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId: !Ref ThemeAPI
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 29000
      Environment:
        Variables:
          DB_ID: !Ref memoryjarDatabase
          DB_ADDRESS: !GetAtt memoryjarDatabase.Endpoint.Address
          DB_PORT: !GetAtt memoryjarDatabase.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${memoryjarDatabase}
          DB_ROOT_USER_SECRET_ARN: !Ref memoryjarDatabaseRootUserSecret
          SENTRY_LAMBDA_DSN: !Ref EnvConfigsentryLambdaDSNAsString
          SENTRY_ENVIRONMENT: !Ref EnvConfigsentryEnvironmentAsString
  DownloadAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefinitionBody:
        openapi: '3.0'
        info:
          title: !Sub ${AWS::StackName}-HttpApi
          version: '1.0'
        paths:
          /:
            get:
              responses: {}
      FailOnWarnings: true
      Auth:
        Authorizers:
          CognitoAuth:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
              audience:
                - !Ref website
        DefaultAuthorizer: CognitoAuth
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowHeaders:
          - '*'
        AllowMethods:
          - '*'
  downloadMediaItemArchive:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-downloadMediaItemArchiv
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: downloadMediaItemArchive
      CodeUri: api/responsibleFor/mediaItems/downloadArchive
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref memoryjarDatabaseRootUserSecret
        - Statement:
            - Effect: Allow
              Action:
                - rds-data:BatchExecuteStatement
                - rds-data:BeginTransaction
                - rds-data:CommitTransaction
                - rds-data:ExecuteStatement
                - rds-data:RollbackTransaction
              Resource:
                - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${memoryjarDatabase}
      Events:
        DownloadAPIGET:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId: !Ref DownloadAPI
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 29000
      Environment:
        Variables:
          DB_ID: !Ref memoryjarDatabase
          DB_ADDRESS: !GetAtt memoryjarDatabase.Endpoint.Address
          DB_PORT: !GetAtt memoryjarDatabase.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${memoryjarDatabase}
          DB_ROOT_USER_SECRET_ARN: !Ref memoryjarDatabaseRootUserSecret
          SENTRY_ENVIRONMENT: !Ref EnvConfigsentryEnvironmentAsString
          SENTRY_LAMBDA_DSN: !Ref EnvConfigsentryLambdaDSNAsString
  deleteMediaItem:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-deleteMediaItem
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: deleteMediaItem
      CodeUri: api/responsibleFor/mediaItems/deleteMediaItem
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref memoryjarDatabaseRootUserSecret
        - Statement:
            - Effect: Allow
              Action:
                - rds-data:BatchExecuteStatement
                - rds-data:BeginTransaction
                - rds-data:CommitTransaction
                - rds-data:ExecuteStatement
                - rds-data:RollbackTransaction
              Resource:
                - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${memoryjarDatabase}
      Environment:
        Variables:
          DB_ID: !Ref memoryjarDatabase
          DB_ADDRESS: !GetAtt memoryjarDatabase.Endpoint.Address
          DB_PORT: !GetAtt memoryjarDatabase.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${memoryjarDatabase}
          DB_ROOT_USER_SECRET_ARN: !Ref memoryjarDatabaseRootUserSecret
          SENTRY_LAMBDA_DSN: !Ref EnvConfigsentryLambdaDSNAsString
          SENTRY_ENVIRONMENT: !Ref EnvConfigsentryEnvironmentAsString
      Events:
        UserDataAPIDELETEmediaItemId:
          Type: HttpApi
          Properties:
            Path: /{mediaItemId}
            Method: DELETE
            ApiId: !Ref UserDataAPI
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 29000
  uploadMediaItem:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-uploadMediaItem
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: uploadMediaItem
      CodeUri: api/responsibleFor/mediaItems/uploadMediaItem
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - S3CrudPolicy:
            BucketName: !Ref AudioLibrary
      Events:
        UserDataAPIPOST:
          Type: HttpApi
          Properties:
            Path: /
            Method: POST
            ApiId: !Ref UserDataAPI
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 29000
      Environment:
        Variables:
          BUCKET_NAME: !Ref AudioLibrary
          BUCKET_ARN: !GetAtt AudioLibrary.Arn
          SENTRY_LAMBDA_DSN: !Ref EnvConfigsentryLambdaDSNAsString
          SENTRY_ENVIRONMENT: !Ref EnvConfigsentryEnvironmentAsString
Parameters:
  SourceLocation:
    Type: String
    Description: Location of source code for deployment (injected by Stackery at deployment time)
  SourceVersion:
    Type: String
    Description: Source version for deployment (injected by Stackery at deployment time)
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  DefaultVPCId:
    Type: AWS::EC2::VPC::Id
    Description: AWS account-specific default VPC ID (injected by Stackery at deployment time)
  DefaultVPCSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: AWS account-specific default VPC subnets (injected by Stackery at deployment time)
  EnvConfigsentryEnvironmentAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/sentryEnvironment
  EnvConfigmixPanelKeyAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/mixPanelKey
  EnvConfigsentryLambdaDSNAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/sentryLambdaDSN
  EnvConfighotjarSVAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/hotjarSV
  EnvConfighotjarIDAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/hotjarID
Metadata:
  EnvConfigParameters:
    EnvConfigsentryEnvironmentAsString: sentryEnvironment
    EnvConfigmixPanelKeyAsString: mixPanelKey
    EnvConfigsentryLambdaDSNAsString: sentryLambdaDSN
    EnvConfighotjarSVAsString: hotjarSV
    EnvConfighotjarIDAsString: hotjarID